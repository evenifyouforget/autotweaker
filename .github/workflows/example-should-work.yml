name: Run the example job (half to end, no online save)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run_script_and_check_score:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This is crucial for initializing any Git submodules, like 'ftlib'.
          submodules: true 

      - name: Run script and capture output
        id: run_script
        # The script's output is redirected to a file and also to stdout.
        # If this script exits with a non-zero status, this step will fail.
        run: |
          ./example/run_example.sh -t 30 | tee output.log

      - name: Display Python module search path on script failure
        # This step will only run if the previous step ('run_script') failed.
        if: failure()
        run: |
          echo "The 'run_example.sh' script failed. Displaying Python module search path:"
          # Execute a Python command to print sys.path, which shows where Python looks for modules.
          python -c "import sys; print(sys.path)"

      - name: Check for negative score
        # This step will only run if the 'run_script' step succeeded.
        if: success()
        run: |
          # Initialize a flag to track if any negative score is found.
          found_negative=false

          # Use grep to find all lines matching the pattern and pipe them to a while loop.
          # The loop processes each matching line individually.
          grep "Best score so far: " output.log | while read -r line; do
            # Extract the score from the current line (the last field).
            score=$(echo "$line" | awk '{print $NF}')
            
            # Check if the extracted score is less than 0 using 'bc -l' for floating-point comparison.
            if (( $(echo "${score} < 0" | bc -l) )); then
              echo "Found a negative score: ${score}"
              # Set the flag to true if a negative score is found.
              found_negative=true
              # Exit the loop early as we only need to find one negative score.
              break 
            fi
          done

          # After checking all lines, determine the job's outcome based on the flag.
          if [ "$found_negative" = true ]; then
            echo "Success: Negative score found, indicating solve."
          else
            echo "Error: No negative score found. (no solve)"
            # Exit with a non-zero status to fail the job if no negative score was found.
            exit 1
          fi
